####################################################################
###                                                             ####
### Author: Junior RT                                           ####
### License: Get Arrays LLC License (https://getarrays.io)      ####
### Date: August 20th, 2022                                     ####
### Version: 1.0                                                ####
###                                                             ####
####################################################################

/*
 * --- General Rules ---
 * Use underscore_names instead of camelCase
 * Table names should be plural
 * Spell out id fields (item_id instead of id)
 * Don't use ambiguous column names
 * Name foreign key columns the same as the columns they refer to
 * Use caps for all SQL queries
 */

CREATE SCHEMA IF NOT EXISTS securecapita;

use securecapita;

-- DROP TABLE IF EXISTS Users;
CREATE TABLE Users(
    id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name  VARCHAR(50) NOT NULL,
    email      VARCHAR(100) NOT NULL,
    password   VARCHAR(255) DEFAULT NULL,
    department   VARCHAR(255) DEFAULT NULL,
    phone      VARCHAR(30) DEFAULT NULL,
    title      VARCHAR(50) DEFAULT NULL,
    bio        VARCHAR(255) DEFAULT NULL,
    enabled    BOOLEAN DEFAULT FALSE,
    non_locked BOOLEAN DEFAULT TRUE,
    using_mfa  BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    image_url  VARCHAR(255) DEFAULT 'https://cdn-icons-png.flaticon.com/512/149/149071.png',
    CONSTRAINT UQ_Users_Email UNIQUE (email)
);

-- DROP TABLE IF EXISTS Roles;

CREATE TABLE Roles
(
    id         BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name       VARCHAR(50) NOT NULL,
    permission VARCHAR(255) NOT NULL,
    CONSTRAINT UQ_Roles_Name UNIQUE (name)
);

-- DROP TABLE IF EXISTS UserRoles;

CREATE TABLE UserRoles
(
    id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    role_id BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (role_id) REFERENCES Roles (id) ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT UQ_UserRoles_User_Id UNIQUE (user_id)
);

-- DROP TABLE IF EXISTS Events;

CREATE TABLE Events
(
    id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    type        VARCHAR(50) NOT NULL CHECK(type IN ('LOGIN_ATTEMPT', 'LOGIN_ATTEMPT_FAILURE', 'LOGIN_ATTEMPT_SUCCESS', 'PROFILE_UPDATE', 'PROFILE_PICTURE_UPDATE', 'ROLE_UPDATE', 'ACCOUNT_SETTINGS_UPDATE', 'PASSWORD_UPDATE', 'MFA_UPDATE')),
    description VARCHAR(255) NOT NULL,
    CONSTRAINT UQ_Events_Type UNIQUE (type)
);

-- DROP TABLE IF EXISTS UserEvents;
CREATE TABLE UserEvents
(

   id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
   user_id BIGINT UNSIGNED NOT NULL,
    event_id   BIGINT UNSIGNED NOT NULL,
    device     VARCHAR(100) DEFAULT NULL,
    ip_address VARCHAR(100) DEFAULT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Events (id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS AccountVerifications;

CREATE TABLE AccountVerifications
(
 id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
 user_id BIGINT UNSIGNED NOT NULL,
    url     VARCHAR(255) NOT NULL,
    -- date     DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_AccountVerifications_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_AccountVerifications_Url UNIQUE (url)
);

-- DROP TABLE IF EXISTS ResetPasswordVerifications;

CREATE TABLE ResetPasswordVerifications
(
    id              BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id         BIGINT UNSIGNED NOT NULL,
    url             VARCHAR(255) NOT NULL,
    expiration_date DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_ResetPasswordVerifications_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_ResetPasswordVerifications_Url UNIQUE (url)
);

-- DROP TABLE IF EXISTS TwoFactorVerifications;

CREATE TABLE TwoFactorVerifications
(
    id              BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id         BIGINT UNSIGNED NOT NULL,
    code            VARCHAR(10) NOT NULL,
    expiration_date DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT UQ_TwoFactorVerifications_User_Id UNIQUE (user_id),
    CONSTRAINT UQ_TwoFactorVerifications_Code UNIQUE (code)
);

-- DROP TABLE IF EXISTS PurchaseRequisition    ;

CREATE TABLE  PurchaseRequisition  (
    id              BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    date            DATETIME NOT NULL,
    departmentCode INT (56) NOT NULL,
     reason                  VARCHAR (40) NOT NULL,
itemNumber              INT (50) NOT NULL,
ItemDescription       VARCHAR (50) NOT NULL,

unitPrice    INT (50) NOT NULL,

quantity   INT (50) NOT NULL,
estimatedValue INT (50) NOT NULL,

    receiverEmail  VARCHAR(150) NOT NULL,
    signature       VARCHAR(255) NOT NULL,

);

-- DROP TABLE IF EXISTS User;

CREATE TABLE UserPurchaseRequest
(
   id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
   user_id BIGINT UNSIGNED NOT NULL,
    event_id   BIGINT UNSIGNED NOT NULL,
    device     VARCHAR(100) DEFAULT NULL,
    ip_address VARCHAR(100) DEFAULT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Events (id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS HeadProcurementAuthorisation;

CREATE TABLE HeadProcurementAuthorisation
(

   id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
   user_id BIGINT UNSIGNED NOT NULL,
    event_id   BIGINT UNSIGNED NOT NULL,
    device     VARCHAR(100) DEFAULT NULL,
    ip_address VARCHAR(100) DEFAULT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (event_id) REFERENCES Events (id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE Stock(
 id      BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,

    productName VARCHAR(255) NOT NULL

     productCode  INT (50) NOT NULL,

    quantity  INT (50) NOT NULL,


)

-- Kumar Kunal - Stock Requisition Tables Creation with Foreign Relations & Normalization Starts Here
	DROP TABLE IF EXISTS stocks;
	CREATE TABLE IF NOT EXISTS stocks(
        id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(100),
        password VARCHAR(100),
        department_requesting VARCHAR(100) DEFAULT NULL,
        stock_request_date DATETIME DEFAULT NULL,
        department_code int DEFAULT NULL,
        purpose_of_issue VARCHAR(200) DEFAULT NULL,
        stock_date DATETIME DEFAULT NULL,
        item_no int DEFAULT NULL,
        item_reference_no VARCHAR(200) DEFAULT NULL,
        item_description VARCHAR(200) DEFAULT NULL,
        date_of_previous_issue DATETIME DEFAULT NULL,
        previous_issue_quantity int DEFAULT NULL,
        quantity_requested int DEFAULT NULL,
        department_initiated_by VARCHAR(255) DEFAULT NULL,
        department_authorised_by VARCHAR(255) DEFAULT NULL,
        department_confirmed_by VARCHAR(255) DEFAULT NULL,
        department_received_by VARCHAR(255) DEFAULT NULL,
        designated_person_approval_name VARCHAR(255) DEFAULT NULL,
        signature VARCHAR(300) DEFAULT NULL,
        date_of_confirmation DATETIME DEFAULT NULL,
        role VARCHAR(20)
	);

    CREATE TABLE stock_request (
	  id INT PRIMARY KEY,
	  stock_id INT,
	  start_date DATE,
	  end_date DATE,
	  status VARCHAR(20),
	  FOREIGN KEY (stock_id) REFERENCES stocks(id)
	);
-- Kumar Kunal - Stock Requisition Tables Creation with Foreign Relations & Normalization Ends Here
